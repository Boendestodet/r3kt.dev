# Nginx configuration for subdomain routing
# This should be placed in /etc/nginx/sites-available/default

# Main application
server {
    listen 80;
    server_name r3kt.dev www.r3kt.dev;
    root /var/www/html/public;
    index index.php;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        include fastcgi_params;
    }
}

# Subdomain routing for projects
server {
    listen 80;
    server_name *.r3kt.dev;
    
    # Extract subdomain
    set $subdomain "";
    if ($host ~* ^([^.]+)\.r3kt\.dev$) {
        set $subdomain $1;
    }
    
    # Route to appropriate Docker container
    location / {
        # Check if container exists and is running
        access_by_lua_block {
            local redis = require "resty.redis"
            local red = redis:new()
            red:set_timeouts(1000, 1000, 1000)
            
            local ok, err = red:connect("127.0.0.1", 6379)
            if not ok then
                ngx.log(ngx.ERR, "failed to connect to redis: ", err)
                return
            end
            
            local subdomain = ngx.var.subdomain
            local container_port = red:get("container:" .. subdomain)
            
            if container_port == ngx.null then
                ngx.status = 404
                ngx.say("Project not found or not deployed")
                ngx.exit(404)
            end
            
            ngx.var.container_port = container_port
        }
        
        # Proxy to Docker container
        proxy_pass http://127.0.0.1:$container_port;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Handle WebSocket connections
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}

# Custom domain routing (if supported)
server {
    listen 80;
    server_name _;
    
    # This will be dynamically configured for custom domains
    # The Laravel application will handle the routing logic
    
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS configuration (recommended for production)
server {
    listen 443 ssl http2;
    server_name r3kt.dev www.r3kt.dev;
    root /var/www/html/public;
    index index.php;

    # SSL configuration
    ssl_certificate /etc/ssl/certs/r3kt.dev.crt;
    ssl_certificate_key /etc/ssl/private/r3kt.dev.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        include fastcgi_params;
    }
}

# HTTPS subdomain routing
server {
    listen 443 ssl http2;
    server_name *.r3kt.dev;
    
    # SSL configuration
    ssl_certificate /etc/ssl/certs/r3kt.dev.crt;
    ssl_certificate_key /etc/ssl/private/r3kt.dev.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # Extract subdomain
    set $subdomain "";
    if ($host ~* ^([^.]+)\.r3kt\.dev$) {
        set $subdomain $1;
    }
    
    # Route to appropriate Docker container
    location / {
        # Check if container exists and is running
        access_by_lua_block {
            local redis = require "resty.redis"
            local red = redis:new()
            red:set_timeouts(1000, 1000, 1000)
            
            local ok, err = red:connect("127.0.0.1", 6379)
            if not ok then
                ngx.log(ngx.ERR, "failed to connect to redis: ", err)
                return
            end
            
            local subdomain = ngx.var.subdomain
            local container_port = red:get("container:" .. subdomain)
            
            if container_port == ngx.null then
                ngx.status = 404
                ngx.say("Project not found or not deployed")
                ngx.exit(404)
            end
            
            ngx.var.container_port = container_port
        }
        
        # Proxy to Docker container
        proxy_pass http://127.0.0.1:$container_port;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Handle WebSocket connections
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
