<?php

namespace App\Http\Controllers;

use App\Models\Project;
use App\Services\DockerService;
use App\Services\FilePermissionService;
use Illuminate\Support\Facades\Log;

class NextJSController extends Controller
{
    public function __construct(
        private DockerService $dockerService
    ) {
        //
    }

    /**
     * Generate Next.js specific system prompt
     */
    public function getSystemPrompt(): string
    {
        return 'You are a web developer. Generate a Next.js project as JSON with these exact keys where each value is a STRING (not an object): app/layout.tsx, app/page.tsx, app/globals.css. Each value must be a complete file content as a string. DO NOT include configuration files like package.json, next.config.js, tsconfig.json, etc. - these are handled by the system. Focus only on the application code and UI components. Return only valid JSON, no other text.';
    }

    /**
     * Generate Next.js specific user prompt
     */
    public function getUserPrompt(string $prompt): string
    {
        return "Create a Next.js website for: {$prompt}";
    }

    /**
     * Get required files for Next.js projects
     */
    public function getRequiredFiles(): array
    {
        return [
            'package.json',
            'next.config.js',
            'tsconfig.json',
            'app/layout.tsx',
            'app/page.tsx',
            'Dockerfile',
            'docker-compose.yml',
            '.dockerignore',
        ];
    }

    /**
     * Generate mock Next.js project data
     */
    public function generateMockProject(string $prompt, string $projectType = 'portfolio'): array
    {
        $baseProject = [
            'project_type' => 'nextjs',
            'name' => 'Next.js Project',
            'description' => 'AI-generated Next.js application',
            'prompt' => $prompt,
            'files' => [],
        ];

        switch ($projectType) {
            case 'portfolio':
                return $this->generatePortfolioProject($prompt);
            case 'ecommerce':
                return $this->generateEcommerceProject($prompt);
            case 'blog':
                return $this->generateBlogProject($prompt);
            case 'landing':
                return $this->generateLandingProject($prompt);
            case 'dashboard':
                return $this->generateDashboardProject($prompt);
            default:
                return $this->generateGenericProject($prompt);
        }
    }

    /**
     * Generate Next.js portfolio project
     */
    private function generatePortfolioProject(string $prompt): array
    {
        return $this->generateGenericProject($prompt);
    }

    /**
     * Generate Next.js ecommerce project
     */
    private function generateEcommerceProject(string $prompt): array
    {
        return $this->generateGenericProject($prompt);
    }

    /**
     * Generate Next.js blog project
     */
    private function generateBlogProject(string $prompt): array
    {
        return $this->generateGenericProject($prompt);
    }

    /**
     * Generate Next.js landing page project
     */
    private function generateLandingProject(string $prompt): array
    {
        return $this->generateGenericProject($prompt);
    }

    /**
     * Generate Next.js dashboard project
     */
    private function generateDashboardProject(string $prompt): array
    {
        return $this->generateGenericProject($prompt);
    }

    /**
     * Generate generic Next.js project
     */
    private function generateGenericProject(string $prompt): array
    {
        return [
            'project_type' => 'nextjs',
            'name' => 'Next.js Project',
            'description' => 'AI-generated Next.js application',
            'prompt' => $prompt,
            'files' => [
                [
                    'path' => 'app/layout.tsx',
                    'type' => 'file',
                    'content' => $this->getLayoutContent(),
                ],
                [
                    'path' => 'app/page.tsx',
                    'type' => 'file',
                    'content' => $this->getPageContent($prompt),
                ],
                [
                    'path' => 'app/globals.css',
                    'type' => 'file',
                    'content' => $this->getGlobalCssContent(),
                ],
            ],
        ];
    }

    /**
     * Get Next.js layout content
     */
    private function getLayoutContent(): string
    {
        return 'import type { Metadata } from \'next\'
import { Inter } from \'next/font/google\'
import \'./globals.css\'

const inter = Inter({ subsets: [\'latin\'] })

export const metadata: Metadata = {
  title: \'Next.js App\',
  description: \'Generated by AI\',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}';
    }

    /**
     * Get Next.js page content
     */
    private function getPageContent(string $prompt): string
    {
        return 'export default function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <div className="z-10 max-w-5xl w-full items-center justify-between font-mono text-sm lg:flex">
        <p className="fixed left-0 top-0 flex w-full justify-center border-b border-gray-300 bg-gradient-to-b from-zinc-200 pb-6 pt-8 backdrop-blur-2xl dark:border-neutral-800 dark:bg-zinc-800/30 dark:from-inherit lg:static lg:w-auto  lg:rounded-xl lg:border lg:bg-gray-200 lg:p-4 lg:dark:bg-zinc-800/30">
          Get started by editing&nbsp;
          <code className="font-mono font-bold">app/page.tsx</code>
        </p>
      </div>

      <div className="relative flex place-items-center before:absolute before:h-[300px] before:w-[480px] before:-translate-x-1/2 before:rounded-full before:bg-gradient-radial before:from-white before:to-transparent before:blur-2xl before:content-[\'\'] after:absolute after:-z-20 after:h-[180px] after:w-[240px] after:translate-x-1/3 after:bg-gradient-conic after:from-sky-200 after:via-blue-200 after:blur-2xl after:content-[\'\'] before:dark:bg-gradient-to-br before:dark:from-transparent before:dark:to-blue-700 before:dark:opacity-10 after:dark:from-sky-900 after:dark:via-[#0141ff] after:dark:opacity-40 before:lg:h-[360px] z-[-1]">
        <h1 className="text-4xl font-bold">
          Welcome to Next.js!
        </h1>
      </div>

      <div className="mb-32 grid text-center lg:max-w-5xl lg:w-full lg:mb-0 lg:grid-cols-4 lg:text-left">
        <div className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30">
          <h2 className="mb-3 text-2xl font-semibold">
            Docs{" "}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className="m-0 max-w-[30ch] text-sm opacity-50">
            Find in-depth information about Next.js features and API.
          </p>
        </div>

        <div className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30">
          <h2 className="mb-3 text-2xl font-semibold">
            Learn{" "}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className="m-0 max-w-[30ch] text-sm opacity-50">
            Learn about Next.js in an interactive course with&nbsp;quizzes!
          </p>
        </div>

        <div className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30">
          <h2 className="mb-3 text-2xl font-semibold">
            Templates{" "}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className="m-0 max-w-[30ch] text-sm opacity-50">
            Explore starter templates for Next.js.
          </p>
        </div>

        <div className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30">
          <h2 className="mb-3 text-2xl font-semibold">
            Deploy{" "}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className="m-0 max-w-[30ch] text-sm opacity-50 text-balance">
            Instantly deploy your Next.js site to a shareable URL with Vercel.
          </p>
        </div>
      </div>
    </main>
  )
}';
    }

    /**
     * Get Next.js global CSS content
     */
    private function getGlobalCssContent(): string
    {
        return '@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}';
    }

    /**
     * Check if project is Next.js
     */
    public function isNextJSProject(Project $project): bool
    {
        $settings = $project->settings ?? [];
        $stack = strtolower(trim($settings['stack'] ?? ''));

        return str_contains($stack, 'next') || str_contains($stack, 'nextjs');
    }

    /**
     * Get Next.js specific Docker configuration
     */
    public function getDockerConfig(): array
    {
        return [
            'port' => 3000,
            'build_command' => 'npm run build',
            'start_command' => 'npm start',
            'dev_command' => 'npm run dev',
        ];
    }

    /**
     * Create Next.js project files
     */
    public function createProjectFiles(string $projectDir, array $projectFiles): void
    {
        // Define protected files that should not be overwritten by AI
        $protectedFiles = [
            'next.config.js',
            'package.json',
            'tsconfig.json',
            'tailwind.config.js',
            'postcss.config.js',
            '.eslintrc.json',
            'Dockerfile',
            '.dockerignore',
            'docker-compose.yml',
        ];

        foreach ($projectFiles as $filePath => $content) {
            // Skip protected files - we'll create them ourselves
            if (in_array($filePath, $protectedFiles)) {
                Log::info('Skipping protected file from AI generation', [
                    'file' => $filePath,
                    'reason' => 'Protected configuration file',
                ]);

                continue;
            }

            $fullPath = "{$projectDir}/{$filePath}";
            $dir = dirname($fullPath);

            // Create directory with proper permissions
            FilePermissionService::createDirectory($dir, 0755);

            // Create file with proper permissions
            FilePermissionService::createFile($fullPath, $content);
        }

        // BULLETPROOF PROTECTION: Delete any AI-generated config files that might have been written
        foreach ($protectedFiles as $protectedFile) {
            $protectedFilePath = "{$projectDir}/{$protectedFile}";
            if (file_exists($protectedFilePath)) {
                Log::warning('Deleting AI-generated protected file', [
                    'file' => $protectedFile,
                    'reason' => 'AI ignored protection instructions',
                ]);
                unlink($protectedFilePath);
            }
        }

        // Ensure we have a complete package.json with all Next.js dependencies
        $this->ensureCompletePackageJson($projectDir, $projectFiles);

        // Create Dockerfile for Next.js project
        $this->createDockerfile($projectDir);
    }

    /**
     * Ensure package.json has all required Next.js dependencies
     */
    public function ensureCompletePackageJson(string $projectDir, array $projectFiles): void
    {
        $packageJsonPath = "{$projectDir}/package.json";

        // Parse existing package.json or create default
        $packageJson = [];
        if (file_exists($packageJsonPath)) {
            $existingContent = file_get_contents($packageJsonPath);
            $packageJson = json_decode($existingContent, true) ?: [];
        }

        // Set default values if not present
        $packageJson['name'] = $packageJson['name'] ?? 'ai-generated-project';
        $packageJson['version'] = $packageJson['version'] ?? '0.1.0';
        $packageJson['private'] = $packageJson['private'] ?? true;

        // Ensure scripts are present (prioritize our enhanced scripts)
        $packageJson['scripts'] = array_merge($packageJson['scripts'] ?? [], [
            'dev' => 'next dev --turbopack',
            'build' => 'next build --turbopack',
            'start' => 'next start',
            'lint' => 'biome check',
            'format' => 'biome format --write',
        ]);

        // Add required dependencies
        $packageJson['dependencies'] = array_merge([
            'react' => '19.1.0',
            'react-dom' => '19.1.0',
            'next' => '15.5.3',
        ], $packageJson['dependencies'] ?? []);

        // Add dev dependencies
        $packageJson['devDependencies'] = array_merge([
            'typescript' => '^5',
            '@types/node' => '^20',
            '@types/react' => '^19',
            '@types/react-dom' => '^19',
            '@tailwindcss/postcss' => '^4',
            'tailwindcss' => '^4',
            '@biomejs/biome' => '2.2.0',
        ], $packageJson['devDependencies'] ?? []);

        // Write the complete package.json
        file_put_contents($packageJsonPath, json_encode($packageJson, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));

        // Create additional required configuration files
        $this->createConfigFiles($projectDir);
    }

    /**
     * Create additional Next.js configuration files
     */
    public function createConfigFiles(string $projectDir): void
    {
        // Create tailwind.config.js for Tailwind CSS v4
        $tailwindConfigPath = "{$projectDir}/tailwind.config.js";
        if (! file_exists($tailwindConfigPath)) {
            $tailwindConfig = <<<'JS'
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
JS;
            file_put_contents($tailwindConfigPath, $tailwindConfig);
        }

        // Create postcss.config.js for Tailwind CSS v4
        $postcssConfigPath = "{$projectDir}/postcss.config.js";
        if (! file_exists($postcssConfigPath)) {
            $postcssConfig = <<<'JS'
module.exports = {
  plugins: {
    '@tailwindcss/postcss': {},
  },
}
JS;
            file_put_contents($postcssConfigPath, $postcssConfig);
        }

        // Create biome.json configuration
        $biomeConfigPath = "{$projectDir}/biome.json";
        if (! file_exists($biomeConfigPath)) {
            $biomeConfig = <<<'JSON'
{
  "$schema": "https://biomejs.dev/schemas/1.9.4/schema.json",
  "organizeImports": {
    "enabled": true
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": true
    }
  },
  "formatter": {
    "enabled": true,
    "indentStyle": "space",
    "indentWidth": 2
  },
  "javascript": {
    "formatter": {
      "quoteStyle": "double",
      "semicolons": "asNeeded"
    }
  }
}
JSON;
            file_put_contents($biomeConfigPath, $biomeConfig);
        }
    }

    /**
     * Create Dockerfile for Next.js projects (Development Mode for Live Previews)
     */
    public function createDockerfile(string $projectDir): void
    {
        $dockerfile = 'FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package.json ./

# Install dependencies
RUN npm install

# Copy source code
COPY . .

# Expose port
EXPOSE 3000

# Start the development server for live previews
CMD ["npm", "run", "dev"]';

        file_put_contents("{$projectDir}/Dockerfile", $dockerfile);
    }

    /**
     * Check if Next.js files already exist in the project directory
     */
    public function hasRequiredFiles(string $projectDir): bool
    {
        $requiredFiles = [
            'app/layout.tsx',
            'app/page.tsx',
            'app/globals.css',
            'package.json',
            'next.config.js',
        ];

        foreach ($requiredFiles as $file) {
            if (! file_exists("{$projectDir}/{$file}")) {
                return false;
            }
        }

        return true;
    }

    /**
     * Create basic Next.js fallback when no generated code is available
     */
    public function createBasicFallback(string $projectDir, Project $project): void
    {
        // Create a basic Next.js structure
        $basicNextJS = [
            'package.json' => json_encode([
                'name' => strtolower($project->slug ?? 'ai-project'),
                'version' => '0.1.0',
                'private' => true,
                'scripts' => [
                    'dev' => 'next dev --turbopack',
                    'build' => 'next build --turbopack',
                    'start' => 'next start',
                    'lint' => 'biome check',
                ],
                'dependencies' => [
                    'react' => '19.1.0',
                    'react-dom' => '19.1.0',
                    'next' => '15.5.3',
                ],
                'devDependencies' => [
                    'typescript' => '^5',
                    '@types/node' => '^20',
                    '@types/react' => '^19',
                    '@types/react-dom' => '^19',
                    '@tailwindcss/postcss' => '^4',
                    'tailwindcss' => '^4',
                    '@biomejs/biome' => '2.2.0',
                ],
            ], JSON_PRETTY_PRINT),
            'app/page.tsx' => 'export default function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-center">
      <h1 className="text-4xl font-bold">Welcome to Your Next.js Project</h1>
      <p className="mt-4 text-lg text-gray-600">This project is ready for AI code generation!</p>
    </main>
  )
}',
            'app/layout.tsx' => 'import type { Metadata } from \'next\'
import \'./globals.css\'

export const metadata: Metadata = {
  title: \''.($project->name ?? 'AI Project').'\',
  description: \'AI Generated Next.js Project\',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}',
            'app/globals.css' => '@import "tailwindcss";',
        ];

        // Create the files
        foreach ($basicNextJS as $filePath => $content) {
            $fullPath = "{$projectDir}/{$filePath}";
            $dir = dirname($fullPath);

            if (! is_dir($dir)) {
                mkdir($dir, 0755, true);
            }

            file_put_contents($fullPath, $content);
        }

        // Create additional configuration files
        $this->createConfigFiles($projectDir);

        // Create Dockerfile for Next.js project
        $this->createDockerfile($projectDir);
    }

    /**
     * Get the internal port for Next.js projects
     */
    public function getInternalPort(): string
    {
        return '3000';
    }
}
